# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: MPL-2.0

slug: vault-key-management-secret-engine
id: 62hbijubcwqn
type: track
title: Vault Key Management Secrets Engine
teaser: Maintain root of trust by securely generating, maintaining, and distributing Vault generated keys to AWS KMS.
description: |-
  The Key Management secrets engine provides a consistent workflow for distribution and lifecycle management of cryptographic keys in various key management service (KMS) providers. It allows organizations to maintain centralized control of their keys in Vault while still taking advantage of cryptographic capabilities native to the KMS providers. (Encrypted S3 buckets as an example).

  This workflow is often called "Bring Your Own Key" or BYOK for short.
icon: https://storage.googleapis.com/instruqt-hashicorp-tracks/logo/vault.png
tags:
- Vault
- ' AWS'
- ' Encryption'
- ADP
owner: hashicorp
developers:
- aklaas@hashicorp.com
private: true
published: true
challenges:
- slug: enable-key-management-secret-engine
  id: hwxvticiiddu
  type: challenge
  title: Enable the Key Management Secrets Engine
  teaser: Prepare Vault to generate encryption keys for AWS KMS.
  notes:
  - type: text
    contents: |-
      Enterprises need to maintain key material outside of the cloud provider’s KMS but make it available to Cloud Service Providers in order to use native services.

      Organizations that are utilizing Vault to centrally store and tightly control access to tokens, passwords, certificates, and encryption keys along with protecting data in transit and at rest require Vault to provide key material to the cloud KMS’.
      This allows them to satisfy their regulatory and/or security requirements.

      In this challenge we will first configure Vault to create those keys and upload them to the cloud provider (AWS).
  assignment: |-
    NOTE: you may need to wait another minute and refresh the page if your terminal shows "unauthorized".

    First, open the "Vault Server" tab and start Vault in Dev mode (The process will not exit).
    ```
    VAULT_UI=true vault server -dev-root-token-id=root -dev -log-level=trace
    ```

    IMPORANT: Switch back to the "terminal" tab....

    The AWS key management secrets engine generates keys for AWS KMS.

    Documentation for the secrets engine can be found here: https://www.vaultproject.io/docs/secrets/key-management.

    API documentation can be found here: https://www.vaultproject.io/api-docs/secret/key-management

    All secrets engines must be enabled before they can be used. View which secrets engines are currently enabled.

    ```
    vault secrets list
    ```

    Note that the key management secrets engine is not enabled. You should enable it.

    ```
    vault secrets enable keymgmt
    ```
    Next, create an AES256 symmetrtic encryption key.
    Key types & compatability are listed here: https://www.vaultproject.io/docs/secrets/key-management#compatibility

    Also, enable deletion of the key for cleanup.
    ```
    vault write -f keymgmt/key/example-key type="aes256-gcm96"
    vault write -f keymgmt/key/example-key deletion_allowed="true"
    ```

    Next, we will configure the AWS Key Management provider.
    Documentation specific to the AWS provider can be found here: https://www.vaultproject.io/docs/secrets/key-management/awskms

    To configure the provider we specify a "key_collection" location (Our AWS region). The provider also requires appropriate IAM credentials to authenticate and access AWS KMS.
    In this example, Vault uses the instance profile of our client virtual machine. See the provider configuration link below to provide credentials with alternative methods.

    The IAM permissions required by Vault are documented here: https://www.vaultproject.io/docs/secrets/key-management/awskms#authentication

    Provider configurations options are here: https://www.vaultproject.io/api/secret/key-management#create-update-kms-provider

    More AWS specific configuration options are here: https://www.vaultproject.io/api-docs/secret/key-management/awskms

    ```
    vault write keymgmt/kms/example-kms \
      provider="awskms" \
      key_collection="us-west-1"
    ```

    Upload the example-key we created earlier to AWS. The key will be protected via CloudHSM and used for encryption & decryption.
    Keys are uploaded via the appropriate cloud's BYOK specification.
    ```
    vault write keymgmt/kms/example-kms/key/example-key \
      purpose="encrypt,decrypt" \
      protection="hsm"
    ```
    Great work. Move on to the next challenge to manage the lifecycle of our newly created key.
  tabs:
  - title: Terminal
    type: terminal
    hostname: base
  - title: Vault Server
    type: terminal
    hostname: base
  - title: Vault UI
    type: service
    hostname: base
    port: 8200
  difficulty: basic
  timelimit: 900
- slug: test-key-management-secret-engine
  id: x9s3o0tpynom
  type: challenge
  title: Test the Key Management Secrets Engine
  teaser: Test key operations in the Key Management secrets engine
  notes:
  - type: text
    contents: |-
      Enterprises also need the ability to manage the key material’s life cycle from a centralized location without having to rely on the cloud providers.

      Once the key material is available in the cloud KMS, users need to be able to manage the life cycle of the key by having the ability to revoke, rotate and update the key.

      Vault provides endpoints for operators to manage the lifecycle of the key and maintain an audit log of all key operations.
  assignment: |-
    First, list our created keys.
    ```
    vault list /keymgmt/key
    ```

    Read the key to see more details such as version, algorithm type, and if deletion is allowed.
    ```
    vault read keymgmt/key/example-key
    ```

    List the Keys in the AWS Provider
    ```
    vault list keymgmt/kms/example-kms/key/

    ```

    Use the AWS CLI to check for our key directly with AWS.
    ```
    aws kms list-keys --region=us-west-1
    ```

    Now, rotate the key.
    ```
    vault write -f keymgmt/key/example-key/rotate
    ```

    List the keys again directly with AWS to verify the new key was created. You should see a key was added.
    ```
    aws kms list-keys --region=us-west-1
    ```

    Delete the keys from AWS. Note: this will not remove them immediately. AWS retains them 30 days by defeault.
    ```
    vault delete keymgmt/kms/example-kms/key/example-key
    vault delete keymgmt/key/example-key
    ```
    Congratuations. You have now learned the basics of Vault's BYOK functionality for AWS. Vault also supports Azure BYOK as well.

    To learn more about the Azure workflow, see the following guide: https://learn.hashicorp.com/tutorials/vault/key-management-secrets.
  tabs:
  - title: Terminal
    type: terminal
    hostname: base
  - title: Vault Server
    type: terminal
    hostname: base
  - title: Vault UI
    type: service
    hostname: base
    port: 8200
  difficulty: basic
  timelimit: 900
checksum: "12936979502396197866"
